"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require('react');
function createSelector(alias) {
    var rest = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        rest[_i - 1] = arguments[_i];
    }
    if (rest.length === 1) {
        return {
            alias: alias,
            valueSelectors: [],
            resolver: rest[0]
        };
    }
    return {
        alias: alias,
        valueSelectors: Array.isArray(rest[0]) ? rest[0] : [rest[0]],
        resolver: rest[1]
    };
}
exports.createSelector = createSelector;
function createWrapper(selectors, options) {
    if (!Array.isArray(selectors)) {
        selectors = [selectors];
    }
    return function wrapper(Component) {
        var Memo = (function (_super) {
            __extends(Memo, _super);
            function Memo(props, context) {
                _super.call(this, props, context);
                this.state = selectors.reduce(function (state, selector) {
                    var args = selector.valueSelectors.map(function (valueSelector) { return valueSelector(props, context); });
                    state[selector.alias] = selector.resolver.apply(selector, args);
                    return state;
                }, {});
            }
            Memo.prototype.componentWillReceiveProps = function (nextProps, nextContext) {
                var _this = this;
                var stateModified = false;
                var modifiedState = selectors.reduce(function (state, selector) {
                    var selectorModified = false;
                    var args = selector.valueSelectors.map(function (valueSelector) {
                        var oldValue = valueSelector(_this.props, _this.context);
                        var newValue = valueSelector(nextProps, nextContext);
                        if (oldValue !== newValue) {
                            stateModified = true;
                            selectorModified = true;
                        }
                        return newValue;
                    });
                    if (selectorModified) {
                        state[selector.alias] = selector.resolver.apply(selector, args);
                    }
                    return state;
                }, {});
                if (stateModified) {
                    this.setState(modifiedState);
                }
            };
            Memo.prototype.render = function () {
                return React.createElement(Component, React.__spread({}, this.props, this.state));
            };
            Memo.contextTypes = options && options.contextTypes;
            Memo.propTypes = options && options.propTypes;
            return Memo;
        }(React.Component));
        return Memo;
    };
}
exports.createWrapper = createWrapper;
